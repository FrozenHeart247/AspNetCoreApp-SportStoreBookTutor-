using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SportStoreBookTutor.Models
{
    public class FakeProductRepository : IProductRepository //Наследуемся и реализуем интерфейс
    {

        public IQueryable<Product> Products => new List<Product> { //Добавляем в Лист новые записи
            new Product { Name = "Footbal", Price = 25 },
            new Product { Name = "Baseball", Price = 24 },
            new Product {Name = "asdasd",Price =23}
        }.AsQueryable<Product>(); //хз че это такое //Есть типа INumerable и вот эта вот шляпа, поясняется на стр. 214

     //   List<int> i = new List<int>(); - проверял как работает лист
       
        /*

 Интерфейс IQueryaЬle<T> удобен, потому что он позволяет эффективно организовать
запрашивание коллекции объектов. Позже в главе будет добавлена поддержка для
извлечения из базы данных подмножества объектов Product. Применение интерфейса
IQueryaЫe<T> дает возможность запрашивать у базы данных именно те объекты, которые
требуются, с помощью стандартных операторов LINQ, не нуждаясь в информации о том,
какой сервер баз данных хранит данные или как он обрабатывает запрос. Без интерфейса
IQueryaЫe<T> пришлось бы извлекать из базы данных все объекты Product и затем
отбрасывать ненужные, что с ростом объема данных, используемых приложением, превращается
в затратную операцию. Именно по этой причине в интерфейсах и классах хранилища
в форме базы данных обычно вместо IEnumeraЫe<T> применяется IQueryaЫe<T>.
Однако во время использования интерфейса IQueryaЬle<T> следует соблюдать осторожность,
поскольку каждый раз, когда происходит перечисление коллекции объектов, запрос
будет оцениваться заново, т.е. базе данных отправится новый запрос. В результате выгоды
в плане эффективности от применения IQueryaЫe<T> могут быть сведены на нет.
В таких ситуациях IQueryaЫe<T> можно преобразовать в более предсказуемую форму,
используя расширяющий метод ToList () или ToArray ().*/

    }
}

   
